version: '3.8'

services:
  # Main backend API
  api:
    container_name: sidekick-forge_api
    image: sidekick-forge-api
    build:
      context: ../
      dockerfile: docker/api/Dockerfile
    env_file:
      - ../.env
    ports:
      - "8000:8000"
    volumes:
      - ../app:/app # Mount the app directory for development
      - ../logs:/app/logs
      - ../data:/app/data
    depends_on:
      - redis
      - db
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:alpine
    container_name: sidekick-forge_redis
    command: >
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - ../data/redis:/data
    networks:
      - sidekick-forge
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Container for building agent images
  agent-builder:
    build:
      context: ./agent
      dockerfile: Dockerfile
    image: sidekick-forge/livekit-agent:latest
    container_name: sidekick-agent-builder
    command: echo "Agent image built successfully"
    profiles:
      - build

networks:
  sidekick-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  
  sidekick-agents-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
    labels:
      managed_by: "sidekick-forge"

# No local volumes in production - using mounted directories
volumes:
  sidekick-db-data:
  sidekick-redis-data:

networks:
  default:
    name: sidekick-network
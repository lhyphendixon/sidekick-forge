name: Staging Deploy
on:
  push:
    branches: [staging]

jobs:
  lint-and-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for hardcoded legacy Supabase URLs
        run: |
          echo "üîç Checking for hardcoded legacy Supabase URLs..."
          if grep -r "eukudpgfpihxsypulopm\.supabase\.co" --exclude-dir=.git --exclude-dir=logs .; then
            echo "‚ùå Found hardcoded legacy Autonomite Supabase URL"
            exit 1
          fi
          if grep -r "yuowazxcxwhczywurmmw\.supabase\.co" --exclude-dir=.git --exclude-dir=logs .; then
            echo "‚ùå Found hardcoded legacy Supabase URL"
            exit 1
          fi
          echo "‚úÖ No hardcoded legacy Supabase URLs found"
      
      - name: Check for os.getenv with hardcoded defaults
        run: |
          echo "üîç Checking for os.getenv with hardcoded Supabase defaults..."
          if grep -r "os\.getenv.*SUPABASE.*\"https://" --exclude-dir=.git --exclude-dir=logs app/; then
            echo "‚ùå Found os.getenv with hardcoded Supabase URL defaults"
            exit 1
          fi
          if grep -r "os\.getenv.*SUPABASE.*\"eyJ" --exclude-dir=.git --exclude-dir=logs app/; then
            echo "‚ùå Found os.getenv with hardcoded Supabase key defaults"
            exit 1
          fi
          echo "‚úÖ No hardcoded Supabase defaults in os.getenv found"
      
      - name: Test settings validation
        run: |
          echo "üîç Testing that Settings() fails without required environment variables..."
          python3 -c "
          import os
          import sys
          # Remove environment variables to test validation
          for key in list(os.environ.keys()):
              if 'SUPABASE' in key:
                  del os.environ[key]
          try:
              from app.config import Settings
              settings = Settings()
              print('‚ùå Settings validation failed - should have raised an error')
              sys.exit(1)
          except Exception as e:
              print(f'‚úÖ Settings validation works correctly: {e}')
          "

  build-and-push:
    needs: lint-and-checks
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - uses: docker/setup-buildx-action@v3
      
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/fastapi:${{ github.sha }}
          
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.STAGING_SSH_HOST }}
          username: ${{ secrets.STAGING_SSH_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            cd /opt/sidekick-forge
            IMAGE_TAG=${{ github.sha }} docker compose -f docker-compose.staging.yml pull fastapi
            IMAGE_TAG=${{ github.sha }} docker compose -f docker-compose.staging.yml up -d fastapi
            docker image prune -af